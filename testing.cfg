# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# Common variables
git_url = 'git@github.com:stade/robot-appium-demo.git'
slave_port = 11111
ui_web_port = 12222
pull_branch = 'master'

# This is a buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Enable debuging connections
#c['debugPassword'] = "3847xnix"

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("slave1", "6708nsdi")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': slave_port}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.



c['change_source'] = []
#c['change_source'].append(changes.GitPoller(
#        smpl_git_url,
#        workdir='gitpoller-workdir',
#        branch=pull_branch,
#        pollinterval=180))

#c['change_source'].append(changes.GitPoller(
        #git_url,
        #workdir='gitpoller-workdir',
        #branches=True,
        #pollinterval=180))

# For triggering changes remotely
c['change_source'].append(changes.PBChangeSource(port=11110, user='sidekick', passwd='8436jdck'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

#change_source_filter = util.ChangeFilter(
#    project="sendchanges",
#    branch=pull_branch)

#def filter_master(branch):
    #return branch not in 'master'

#trigger_unless_master = util.ChangeFilter(
    #branch=pull_branch)

c['schedulers'] = []
#c['schedulers'].append(schedulers.SingleBranchScheduler(
#    name="release_tests",
#    change_filter=util.ChangeFilter(branch=pull_branch),
#    treeStableTimer=180,
#    builderNames=["test-single"]))
#c['schedulers'].append(schedulers.AnyBranchScheduler(#
    #name="testing",
    #change_filter=util.ChangeFilter(branch_fn=filter_master),
    #treeStableTimer=60,
    #builderNames=["test"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=["test"]))

releaseFilt = util.ChangeFilter(category="release")
s=schedulers.AnyBranchScheduler(name="Release", change_filter=releaseFilt,
            treeStableTimer=10,
            builderNames=["test"])
c['schedulers'].append(s)


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()


# check out the source
factory.addStep(steps.Git(repourl=git_url, branch=pull_branch, mode='incremental'))


# lock access to multiple tests running on a same phone because it causes failures
default_lock = util.MasterLock("default")

# run script that executes tests
factory.addStep(steps.ShellCommand(command=["sleep 60", "&&", "ls", "-la"], locks=[default_lock.access('exclusive')]))


c['builders'] = []
#c['builders'].append(
    #util.BuilderConfig(name="test",
     # slavenames=["slave1"],
      #factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.plugins import status, util

repoOwner = util.Interpolate("%(prop:github_repo_owner)s")
repoName = util.Interpolate("%(prop:github_repo_name)s")
sha = util.Interpolate("%(src::revision)s")
gs = status.GitHubStatus(token='fd5cc1e0527f356f00c8473dcb076e4fe807bd4a',
                         repoOwner=repoOwner,
                         repoName=repoName,
                         sha=sha,
                         startDescription='Build started.',
                         endDescription='Build done.')


buildbot_bbtools = util.BuilderConfig(
    name='test',
    slavenames=['slave1'],
    factory=factory,
    properties={
        "github_repo_owner": "stade",
        "github_repo_name": "robot-appium-demo",
    })

c['builders'].append(buildbot_bbtools)
c['status'].append(gs)


from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("buildbot","testing234")]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    view = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth'
)
c['status'].append(html.WebStatus(http_port=ui_web_port, authz=authz_cfg,
                                    change_hook_dialects={
                                        'base': True,
                                        'github': {
                                            'secret': 'testing934',
                                            'strict': True,
                                            'category': 'release'
                                        }
                                    },
                                    change_hook_auth=["file:changehook.passwd"]
                                    ))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "foo"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:" + str(ui_web_port) + '/'
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
